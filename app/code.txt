# Search For Products With Name
# @api_view(['GET'])
# def searchProduct(request, name):
#     matchedProducts = Products.objects.filter(product_name=name)
#     matchedProductsSerialized=ProductsSerializer(matchedProducts,many=True)
#     return Response(matchedProductsSerialized.data, status=200)

# @api_view(["GET"])
# def getAllProducts(request):
#     products = Products.objects.all()
#     serialized_Products = ProductsSerializer(products, many=True)
#     return Response(serialized_Products.data)


# # Get Specific Product
# @api_view(["GET"])
# def getProduct(request, id):
#     try:
#         product = Products.objects.get(id=id)
#         serialized_Product = ProductsSerializer(product)
#         return Response(serialized_Product.data, status=200)
#     except:
#         return Response({"Error - This Product Doesn’t Exist"}, status=400)


# # Add New Product
# @api_view(["GET", "POST"])
# def createProduct(request):
#     product = request.data
#     serialized_Product = ProductsSerializer(data=product)
#     if serialized_Product.is_valid():
#         serialized_Product.save()
#         return Response(serialized_Product.data, status=201)
#     else:
#         return Response(serialized_Product.errors, status=400)


# # Update Existing Product
# @api_view(["PUT"])
# def updateProduct(request, id):
#     try:
#         product = Products.objects.get(id=id)
#         for key, value in request.POST.items():
#             setattr(product, key, value)
#         serialized_Product = ProductsSerializer(product)
#         product.save()
#         return Response(serialized_Product.data, status=200)
#     except:
#         return Response({"Error - This Product Doesn’t Exist"}, status=400)


# Delete Existing Product
# @api_view(["DELETE"])
# def deleteProduct(request, id):
#     try:
#         product = Products.objects.get(id=id)
#         product.delete()
#         return Response("{} is deleted".format(product))
#         # return Response({`$productProduct Deleted`},status=200)
#     except:
#         return Response({"Error - This Product Does not Exist"}, status=400)


@api_view(['GET','POST'])
@authentication_classes([JWTAuthentication])
@permission_classes([IsAuthenticated])
def cart_List(request, id):
    # GET
    if request.method == 'GET':
        cart = Cart.objects.all()
        serializer = CartSerializer(cart)
        return Response(serializer.data, status=status.HTTP_200_OK)
    # POST
    elif request.method == 'POST':
        serializer = CartSerializer(data= request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status= status.HTTP_201_CREATED)
        return Response(serializer.data, status= status.HTTP_400_BAD_REQUEST)

    # path('products/<str:name>/', views.searchProduct),
    # path('create-product/', views.createProduct),
    # path('update-product/<int:id>/', views.updateProduct),
    # path('delete-product/<int:id>/', views.deleteProduct),
    # path('products/<str:name>/',views.all_products),

class AddCartGene(generics.UpdateAPIView):  
    queryset = Products.objects.all()
    serializer_class = ProductsSerializer
    lookup_field = "pk"